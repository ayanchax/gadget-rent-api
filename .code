// Get Song by song identifier.
router.get("/song", (req, res, next) => {
    axiosConfig.setResponseHeader(res);
    let mainPromise = [];
    let lyricPromises = [];
    let song = {};
    let lyricData = [];
    const q = req.query.songid;
    if (q == null || q === "" || q === undefined) {
        res.status(404).json({
            msg: messages.SUPPLY_VALID_IDENTIFIER,
            diagnostics: messages.AMBIGIOUS,
            error: 404,
        });
    }
    let l = req.query.lyrics;
    if (!helper.isBoolean(l)) {
        l = false;
    }
    mainPromise.push(
        axios
        .get(process.env.SONG_DETAILS_ENDPOINT + q, axiosConfig)
        .then((response) => {
            var song_response = response.data;
            if (song_response.length == 0) {
                res.status(404).json(messages.NO_SEARCH_RESULTS);
            }

            var _song = song_response.songs[0];

            lyricPromises.push(
                helper
                .formatSongResponse_V2(
                    response,
                    l,
                    _song.id,
                    lyricData,
                    axios,
                    axiosConfig
                )
                .then((_rs) => {
                    song = _rs.data.songs[0];
                })
            );
            Promise.all(mainPromise).then(() => {
                Promise.all(lyricPromises).then(() => {
                    res.status(200).json(song);
                });
            });
        })
        .catch((err) => {
            res.status(500).json({
                msg: messages.ERROR,
                diagnostics: err,
                error: 500,
            });
        })
    );
});